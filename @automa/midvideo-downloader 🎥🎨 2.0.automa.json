{"extVersion":"1.29.12","name":"midvideo-downloader üé•üé® 2.0","icon":"riGlobalLine","table":[],"version":"1.29.12","drawflow":{"nodes":[{"id":"JnAVtOJ0zOultqutysm9N","type":"BlockBasic","initialized":false,"position":{"x":100,"y":397},"data":{"activeInInput":false,"contextMenuName":"","contextTypes":[],"date":"","days":[],"delay":5,"description":"","disableBlock":false,"interval":60,"isUrlRegex":false,"observeElement":{"baseElOptions":{"attributeFilter":[],"attributes":false,"characterData":false,"childList":true,"subtree":false},"baseSelector":"","matchPattern":"","selector":"","targetOptions":{"attributeFilter":[],"attributes":false,"characterData":false,"childList":true,"subtree":false}},"parameters":[],"preferParamsInTab":false,"shortcut":"","time":"00:00","type":"manual","url":""},"label":"trigger"},{"id":"2d7n5vo","type":"BlockBasic","initialized":false,"position":{"x":559.7104922851563,"y":398.403957945424},"data":{"activeTab":true,"createIfNoMatch":true,"description":"","disableBlock":false,"findTabBy":"match-patterns","matchPattern":"https://www.midjourney.com/explore?tab=video_top","tabIndex":0,"tabTitle":"","url":"https://www.midjourney.com/explore?tab=video_top"},"label":"switch-tab"},{"id":"q3z056a","type":"BlockBasic","initialized":false,"position":{"x":966.7618716672091,"y":400.3422978472434},"data":{"disableBlock":false,"description":"","timeout":20000,"context":"website","code":"(() => {\n  class VideoURLCollector {\n    constructor(options = {}) {\n      const container = options.scrollContainer || document.getElementById('pageScroll');\n      if (!container) throw new Error('Scroll container #pageScroll not found.');\n      this.scrollContainer = container;\n\n      this.maxVideos = options.maxVideos ?? 50;\n      this.batchSize = options.batchSize ?? 10;\n      this.batchWaitTime = options.batchWaitTime ?? 5000;\n      this.scrollBuffer = options.scrollBuffer ?? 200;\n\n      this.videoUrls = new Set();\n      this.isRunning = false;\n      this.currentBatch = 0;\n    }\n\n    delay(ms) { return new Promise(res => setTimeout(res, ms)); }\n\n    static cssEscape(str) {\n      if (window.CSS && typeof window.CSS.escape === 'function') return window.CSS.escape(str);\n      return String(str).replace(/[^a-zA-Z0-9_\\-]/g, s => '\\\\' + s.charCodeAt(0).toString(16) + ' ');\n    }\n\n    normalizeUrl(url) {\n      if (!url) return null;\n      try { const u = new URL(url, location.href); u.hash = ''; return u.href; } catch { return null; }\n    }\n\n    getVideoElements() {\n      const selectors = ['div[draggable=\"true\"]','video','source','a[href*=\".mp4\"]','[data-src*=\".mp4\"]','[data-url*=\".mp4\"]'];\n      const elements = new Set();\n      selectors.forEach(selector => {\n        document.querySelectorAll(selector).forEach(el => {\n          if (el.tagName && (/video|source/i).test(el.tagName)) {\n            const card = el.closest('div[draggable=\"true\"]') || el.closest('a') || el;\n            elements.add(card);\n          } else elements.add(el);\n        });\n      });\n      return Array.from(elements).filter(el => el && el.offsetParent !== null);\n    }\n\n    scrollToElement(element, index) {\n      const c = this.scrollContainer;\n      const cR = c.getBoundingClientRect();\n      const eR = element.getBoundingClientRect();\n      const scrollOffset = (eR.top - cR.top) + c.scrollTop - (c.clientHeight / 2) + (eR.height / 2);\n      const targetScroll = Math.max(0, scrollOffset + this.scrollBuffer);\n      c.scrollTop = targetScroll;\n      console.log(`[Batch ${this.currentBatch}] Scrolled to ${index + 1} @ ${targetScroll}`);\n    }\n\n    getVideoUrls() {\n      const urls = new Set();\n      document.querySelectorAll('video[src]').forEach(v => { const u = this.normalizeUrl(v.getAttribute('src')); if (u && u.endsWith('.mp4')) urls.add(u); });\n      document.querySelectorAll('source[src]').forEach(s => { const u = this.normalizeUrl(s.getAttribute('src')); if (u && u.endsWith('.mp4')) urls.add(u); });\n      document.querySelectorAll(\"a[href*='.mp4']\").forEach(a => { const u = this.normalizeUrl(a.getAttribute('href')); if (u && u.endsWith('.mp4')) urls.add(u); });\n      document.querySelectorAll('[data-src],[data-url]').forEach(el => { const cand = el.getAttribute('data-src') || el.getAttribute('data-url'); const u = this.normalizeUrl(cand); if (u && u.endsWith('.mp4')) urls.add(u); });\n      const arr = Array.from(urls);\n      console.log(`[Batch ${this.currentBatch}] Found ${arr.length} URLs in view`);\n      return arr;\n    }\n\n    ensureHighlightStyles() {\n      if (document.getElementById('__video_pick_styles')) return;\n      const style = document.createElement('style');\n      style.id = '__video_pick_styles';\n      style.textContent = `.video-picked{border:3px dotted #00ff3b!important;border-radius:12px;box-shadow:0 0 0 2px rgba(16,185,129,.15);transition:all .2s ease;background:rgba(16,185,129,.05)!important}.batch-highlight{border:2px solid #06f!important;box-shadow:0 0 8px rgba(0,102,255,.3)}`;\n      document.head.appendChild(style);\n    }\n\n    highlightBatchElements(newUrls) {\n      this.ensureHighlightStyles();\n      newUrls.forEach(url => {\n        try {\n          const esc = VideoURLCollector.cssEscape(url);\n          const nodes = [\n            ...document.querySelectorAll(`video[src=\"${esc}\"]`),\n            ...document.querySelectorAll(`source[src=\"${esc}\"]`)\n          ];\n          nodes.forEach(node => {\n            const card = node.closest('div[draggable=\"true\"]') || node.closest('a') || node;\n            if (card) {\n              card.classList.add('video-picked','batch-highlight');\n              setTimeout(() => card.classList.remove('batch-highlight'), 2000);\n            }\n          });\n        } catch {}\n      });\n    }\n\n    saveUrls(urls) {\n      const newUrls = [];\n      urls.forEach(u => { if (u && !this.videoUrls.has(u)) { this.videoUrls.add(u); newUrls.push(u); console.log(`+ saved: ${u} [${this.videoUrls.size}/${this.maxVideos}]`); } });\n      return newUrls;\n    }\n\n    async main() {\n      if (this.isRunning) return this.getCollectedUrls();\n      this.isRunning = true; this.currentBatch = 0;\n      console.log(`üöÄ Starting batch collection (target=${this.maxVideos}, batchSize=${this.batchSize})`);\n\n      try {\n        automaResetTimeout();\n        const init = this.getVideoUrls();\n        const newInit = this.saveUrls(init);\n        if (newInit.length) this.highlightBatchElements(newInit);\n\n        while (this.videoUrls.size < this.maxVideos) {\n          this.currentBatch++;\n          automaResetTimeout(); // before batch work\n\n          const els = this.getVideoElements();\n          console.log(`[Batch ${this.currentBatch}] DOM has ${els.length} video elements`);\n          if (!els.length) break;\n\n          const idx = Math.min((this.currentBatch * this.batchSize) - 1, els.length - 1);\n          const target = els[idx];\n          if (!target) break;\n\n          this.scrollToElement(target, idx);\n          automaResetTimeout();\n          await this.delay(1000); // lazy-load settle\n\n          const batch = this.getVideoUrls();\n          const newOnes = this.saveUrls(batch);\n          if (newOnes.length) this.highlightBatchElements(newOnes);\n\n          if (this.videoUrls.size >= this.maxVideos) break;\n          if (idx >= els.length - 1) break;\n\n          console.log(`‚è±Ô∏è [Batch ${this.currentBatch}] Waiting ${this.batchWaitTime/1000}s ...`);\n          automaResetTimeout(); // before long wait\n          await this.delay(this.batchWaitTime);\n        }\n\n        const result = this.getCollectedUrls().slice(0, this.maxVideos);\n        window.__collectedMp4Urls__ = result;\n        console.log(`‚úÖ Done. Collected ${result.length} unique .mp4 URLs in ${this.currentBatch} batches.`);\n        return result;\n      } catch (err) {\n        console.error('‚ùå Collection error:', err);\n        return this.getCollectedUrls();\n      } finally {\n        this.isRunning = false;\n      }\n    }\n\n    getCollectedUrls() { return Array.from(this.videoUrls); }\n  }\n\n  const VideoCollectorUtils = {\n    async collectVideos(maxVideos = 50, options = {}) {\n      const collector = new VideoURLCollector({ maxVideos, ...options });\n      return await collector.main();\n    },\n    createCollector(options = {}) { return new VideoURLCollector(options); }\n  };\n\n  window.VideoURLCollector = VideoURLCollector;\n  window.VideoCollectorUtils = VideoCollectorUtils;\n})();\n\nfunction transformUrlsToObjects(urls) {\n  return urls.map(videoUrl => {\n    const match = videoUrl.match(/\\/video\\/([^/]+)\\//);\n    const videoName = match ? match[1] : null;\n    const pageUrl = videoName ? `https://www.midjourney.com/jobs/${videoName}?index=0` : null;\n    return { videoUrl, pageUrl, videoName, downloaded: false };\n  });\n}\n\n(() => {\n  let __done = false; // guard to avoid multiple nextBlock calls\n  const nextOnce = () => { if (!__done) { __done = true; automaNextBlock(); } };\n\n  (async function runVideoCollection() {\n    try {\n      automaResetTimeout();\n      const urls = await VideoCollectorUtils.collectVideos(50, { batchSize: 10, batchWaitTime: 5000, scrollBuffer: 200 });\n      const videos = transformUrlsToObjects(urls);\n      automaSetVariable('videos', videos);\n      console.log('‚úÖ Variable set successfully');\n      nextOnce(); // immediate hand-off\n    } catch (error) {\n      console.error('‚ùå Error in video collection:', error);\n      automaSetVariable('videos', []);\n      nextOnce();\n    }\n  })();\n})();\n","preloadScripts":[],"everyNewTab":false,"runBeforeLoad":false},"label":"javascript-code"},{"id":"pupfkqb","type":"BlockBasic","initialized":false,"position":{"x":1287.0576948080147,"y":812.1644188622862},"data":{"disableBlock":false,"description":"","message":"","iconUrl":"","imageUrl":"","title":"Hello world!"},"label":"notification"},{"id":"3gg1gay","type":"BlockBasicWithFallback","initialized":false,"position":{"x":1792.2292517665041,"y":458.72408690477994},"data":{"assignVariable":true,"body":"{\n  \"videos\":{{!variables@videos}}\n}\n","contentType":"json","dataColumn":"","dataPath":"","description":"","disableBlock":false,"headers":[],"method":"POST","responseType":"json","saveData":false,"timeout":10000,"url":"http://localhost:5000/dailyvids","variableName":"response"},"label":"webhook"},{"id":"xt51yzt","type":"BlockBasic","initialized":false,"position":{"x":2000.443132141377,"y":261.4254002230936},"data":{"description":"","disableBlock":false,"iconUrl":"","imageUrl":"","message":"{{!variables@response}}","title":"RESPONSE"},"label":"notification"},{"id":"r983hqh","type":"BlockBasic","initialized":false,"position":{"x":1905.381778217475,"y":762.8629485882087},"data":{"description":"","disableBlock":false,"iconUrl":"","imageUrl":"","message":"SERVER NOT FOUND","title":"ERROR SERVER"},"label":"notification"}],"edges":[{"id":"vueflow__edge-JnAVtOJ0zOultqutysm9NJnAVtOJ0zOultqutysm9N-output-1-2d7n5vo2d7n5vo-input-1","type":"custom","source":"JnAVtOJ0zOultqutysm9N","target":"2d7n5vo","sourceHandle":"JnAVtOJ0zOultqutysm9N-output-1","targetHandle":"2d7n5vo-input-1","updatable":true,"selectable":true,"data":{},"label":"","markerEnd":"arrowclosed","sourceX":316.00023614070784,"sourceY":433.00003542583846,"targetX":535.7103858656726,"targetY":434.40399337126246},{"id":"vueflow__edge-2d7n5vo2d7n5vo-output-1-q3z056aq3z056a-input-1","type":"custom","source":"2d7n5vo","target":"q3z056a","sourceHandle":"2d7n5vo-output-1","targetHandle":"q3z056a-input-1","updatable":true,"selectable":true,"data":{},"label":"","markerEnd":"arrowclosed","sourceX":775.7106692723803,"sourceY":434.40399337126246,"targetX":942.7620018616611,"targetY":436.34233327308186},{"id":"vueflow__edge-q3z056aq3z056a-output-1-pupfkqbpupfkqb-input-1","type":"custom","source":"q3z056a","target":"pupfkqb","sourceHandle":"q3z056a-output-1","targetHandle":"pupfkqb-input-1","updatable":true,"selectable":true,"data":{},"label":"","markerEnd":"arrowclosed","class":"connected-edges","sourceX":1182.7622852683687,"sourceY":436.34233327308186,"targetX":1263.0577066954988,"targetY":848.1644247113827},{"id":"vueflow__edge-q3z056aq3z056a-output-1-3gg1gay3gg1gay-input-1","type":"custom","source":"q3z056a","target":"3gg1gay","sourceHandle":"q3z056a-output-1","targetHandle":"3gg1gay-input-1","updatable":true,"selectable":true,"data":{},"label":"","markerEnd":"arrowclosed","class":"source-q3z056a-output-1 target-3gg1gay-input-1","sourceX":1182.7622852683687,"sourceY":436.34233327308186,"targetX":1768.2292636539883,"targetY":506.7241459636183},{"id":"vueflow__edge-3gg1gay3gg1gay-output-1-xt51yztxt51yzt-input-1","type":"custom","source":"3gg1gay","target":"xt51yzt","sourceHandle":"3gg1gay-output-1","targetHandle":"xt51yzt-input-1","updatable":true,"selectable":true,"data":{},"label":"","markerEnd":"arrowclosed","sourceX":2008.229547060696,"sourceY":506.7241459636183,"targetX":1976.4429074149255,"targetY":297.4254060721901},{"id":"vueflow__edge-3gg1gay3gg1gay-output-fallback-r983hqhr983hqh-input-1","type":"custom","source":"3gg1gay","target":"r983hqh","sourceHandle":"3gg1gay-output-fallback","targetHandle":"r983hqh-input-1","updatable":true,"selectable":true,"data":{},"label":"","markerEnd":"arrowclosed","sourceX":2008.229547060696,"sourceY":528.7241547845858,"targetX":1881.381790104959,"targetY":798.8629544373052}],"position":[-501,58],"zoom":0.51590538845195,"viewport":{"x":-501,"y":58,"zoom":0.51590538845195}},"settings":{"aipowerToken":"","blockDelay":0,"debugMode":false,"defaultColumnName":"column","execContext":"popup","executedBlockOnWeb":false,"inputAutocomplete":true,"insertDefaultColumn":false,"notification":true,"onError":"stop-workflow","publicId":"","restartTimes":3,"reuseLastState":false,"saveLog":true},"globalData":"{\n\t\"key\": \"value\"\n}","description":"","includedWorkflows":{}}